{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1> Nomor 2A </h1>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3> Import the Libraries </h3><br>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {},
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "import numpy as np\n",
    "from tensorflow.keras import *\n",
    "from keras.layers import *\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3> Loading Dataset from CIFAR10 </h3><br>\n",
    "The CIFAR10 dataset contains 60,000 color images in 10 classes, with 6,000 images in each class. The dataset is divided into 50,000 training images and 10,000 testing images. The classes are mutually exclusive and there is no overlap between them."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [],
   "source": [
    "(train_images, train_labels), (test_images, test_labels) = datasets.cifar10.load_data()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3> Normalize the Data </h3><br>\n",
    "Normalizing the data between 0 and 1 to help with the training"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_images, test_images = train_images / 255.0, test_images / 255.0"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3> Get data from index 1, 3, 5 ,9 </h3><br>\n",
    "Here are the classes of the dataset <br>\n",
    "0 - Airplane <br>\n",
    "1 - Automobile <br>\n",
    "2 - Bird<br>\n",
    "3 - Cat<br>\n",
    "4 - Deer<br>\n",
    "5 - Dog<br>\n",
    "6 - Frog<br>\n",
    "7 - Horse<br>\n",
    "8 - Ship<br>\n",
    "9 - Truck<br>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {},
   "outputs": [],
   "source": [
    "a,_ = np.where((train_labels==1) |(train_labels==3) | (train_labels==5) |(train_labels==9) ) \n",
    "b,_ = np.where((test_labels==1) |(test_labels==3) | (test_labels==5) |(test_labels==9) ) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3> Building the input vector from the 32x32 pixels </h3><br>\n",
    "We will configure our CNN to process inputs of shape (32, 32, 3), which is the format of CIFAR images."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train  = np.reshape(train_images[a],(len(a),32,32,3))\n",
    "Y_train = np.reshape(train_labels[a],(len(a),1))\n",
    "\n",
    "X_test = np.reshape(test_images[b],(len(b),32,32,3))\n",
    "Y_test = np.reshape(test_labels[b],(len(b),1))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3> Deploy the CNN Architecture </h3><br>\n",
    "We build a linear stack of layers with the sequential model<br>\n",
    "We design the architecture as follows: Conv(16,3x3), Relu, Conv(32,3x3), Relu, Conv(64,3x3), Dense layer with 250 nodes nd relu activation, Dense Layer with 120 Nodes and relu activation, and Dense layer with 10 nodes and softmax activation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"sequential_16\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "conv2d_48 (Conv2D)           (None, 30, 30, 16)        448       \n",
      "_________________________________________________________________\n",
      "conv2d_49 (Conv2D)           (None, 28, 28, 32)        4640      \n",
      "_________________________________________________________________\n",
      "conv2d_50 (Conv2D)           (None, 26, 26, 64)        18496     \n",
      "_________________________________________________________________\n",
      "flatten_16 (Flatten)         (None, 43264)             0         \n",
      "_________________________________________________________________\n",
      "dense_48 (Dense)             (None, 250)               10816250  \n",
      "_________________________________________________________________\n",
      "dense_49 (Dense)             (None, 120)               30120     \n",
      "_________________________________________________________________\n",
      "dense_50 (Dense)             (None, 10)                1210      \n",
      "=================================================================\n",
      "Total params: 10,871,164\n",
      "Trainable params: 10,871,164\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "model = models.Sequential()\n",
    "model.add(Conv2D(16, (3, 3), activation='relu', input_shape=(32, 32, 3)))\n",
    "model.add(Conv2D(32, (3, 3), activation='relu'))\n",
    "model.add(Conv2D(64, (3, 3), activation='relu'))\n",
    "model.add(Flatten())\n",
    "model.add(Dense(250, activation='relu'))\n",
    "model.add(Dense(120, activation='relu'))\n",
    "model.add(Dense(10, activation='softmax'))\n",
    "model.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1> Nomor 2B </h1>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3> Compile and Train CNN Model </h3><br>\n",
    "We can now compile it to form a CNN model and train the model to do image classification. We use Adam optimizer and categorical cross-entropy loss"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/10\n",
      "1563/1563 [==============================] - 150s 96ms/step - loss: 1.6503 - accuracy: 0.3969 - val_loss: 1.1309 - val_accuracy: 0.5969\n",
      "Epoch 2/10\n",
      "1563/1563 [==============================] - 152s 97ms/step - loss: 0.9287 - accuracy: 0.6732 - val_loss: 0.9824 - val_accuracy: 0.6578\n",
      "Epoch 3/10\n",
      "1563/1563 [==============================] - 148s 94ms/step - loss: 0.5960 - accuracy: 0.7958 - val_loss: 1.0621 - val_accuracy: 0.6620\n",
      "Epoch 4/10\n",
      "1563/1563 [==============================] - 153s 98ms/step - loss: 0.3013 - accuracy: 0.8972 - val_loss: 1.3158 - val_accuracy: 0.6500\n",
      "Epoch 5/10\n",
      "1563/1563 [==============================] - 151s 96ms/step - loss: 0.1445 - accuracy: 0.9522 - val_loss: 1.6129 - val_accuracy: 0.6428\n",
      "Epoch 6/10\n",
      "1563/1563 [==============================] - 147s 94ms/step - loss: 0.0963 - accuracy: 0.9695 - val_loss: 1.8342 - val_accuracy: 0.6581\n",
      "Epoch 7/10\n",
      "1563/1563 [==============================] - 146s 93ms/step - loss: 0.0703 - accuracy: 0.9760 - val_loss: 2.1385 - val_accuracy: 0.6428\n",
      "Epoch 8/10\n",
      "1563/1563 [==============================] - 150s 96ms/step - loss: 0.0654 - accuracy: 0.9793 - val_loss: 2.3450 - val_accuracy: 0.6392\n",
      "Epoch 9/10\n",
      "1563/1563 [==============================] - 148s 94ms/step - loss: 0.0659 - accuracy: 0.9782 - val_loss: 2.3583 - val_accuracy: 0.6367\n",
      "Epoch 10/10\n",
      "1563/1563 [==============================] - 155s 99ms/step - loss: 0.0515 - accuracy: 0.9828 - val_loss: 2.5312 - val_accuracy: 0.6337\n"
     ]
    }
   ],
   "source": [
    "model.compile(optimizer='adam',loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),metrics=['accuracy'])\n",
    "\n",
    "history = model.fit(train_images, train_labels, epochs=10, validation_data=(test_images, test_labels)) "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1> Nomor 2C </h1>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3> Report classification accuracy of the classifier </h3><br>\n",
    "This accuracy is quite good, if we want to improve the accuracy we can redesign the CNN model or increase the number of epochs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "125/125 - 1s - loss: 2.5504 - accuracy: 0.6192\n"
     ]
    }
   ],
   "source": [
    "test_loss, test_acc = model.evaluate(X_test, Y_test, verbose=2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3>Plotting the confusion Matrix</h3>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "import itertools\n",
    "plt.rcParams['figure.figsize'] = [10,7]\n",
    "def plot_confusion_matrix(cm, classes,\n",
    "    normalize=False,\n",
    "    title='Confusion matrix',\n",
    "    cmap=plt.cm.Blues):\n",
    "    if normalize:\n",
    "        cm = cm.astype('float') / cm.sum(axis=1)[:, np.newaxis]\n",
    "        print(\"Normalized confusion matrix\")\n",
    "    else:\n",
    "        print('Confusion matrix, without normalization')\n",
    "        \n",
    "    print(cm)\n",
    "    plt.imshow(cm, interpolation='nearest', cmap=cmap)\n",
    "    plt.title(title)\n",
    "    plt.colorbar()\n",
    "    tick_marks = np.arange(len(classes))\n",
    "    plt.xticks(tick_marks, classes, rotation=45)\n",
    "    plt.yticks(tick_marks, classes)\n",
    "    \n",
    "    fmt = '.2f' if normalize else 'd'\n",
    "    thresh = cm.max() / 2.\n",
    "    \n",
    "    for i, j in itertools.product(range(cm.shape[0]), range(cm.shape[1])):\n",
    "         plt.text(j, i, format(cm[i, j], fmt),\n",
    "         horizontalalignment=\"center\",\n",
    "         color=\"white\" if cm[i, j] > thresh else \"black\")\n",
    "    plt.tight_layout()\n",
    "    plt.ylabel('True label')\n",
    "    plt.xlabel('Predicted label')\n",
    "    plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion matrix, without normalization\n",
      "[[  0   0   0   0   0   0   0   0   0   0]\n",
      " [ 24 732  14  18   7  10   9   7  42 137]\n",
      " [  0   0   0   0   0   0   0   0   0   0]\n",
      " [ 49  18  67 468  56 167  56  60  23  36]\n",
      " [  0   0   0   0   0   0   0   0   0   0]\n",
      " [ 21   3  88 223  34 506  22  73  19  11]\n",
      " [  0   0   0   0   0   0   0   0   0   0]\n",
      " [  0   0   0   0   0   0   0   0   0   0]\n",
      " [  0   0   0   0   0   0   0   0   0   0]\n",
      " [ 36  80   8  24   8  13   6  18  36 771]]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x504 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "p_test = model.predict(X_test).argmax(axis=1)\n",
    "cm = confusion_matrix(Y_test, p_test)\n",
    "plot_confusion_matrix(cm, list(range(4)))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
